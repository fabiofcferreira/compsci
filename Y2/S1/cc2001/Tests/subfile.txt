-- SUBMISSION FILE

-- DAA001
import java.util.Scanner;

class DAA001 {
  public static void main(String[] args) {
    Scanner in = new Scanner(System.in);

    int size = 0;
    int number;
    int counter = 0;

    size = in.nextInt();

    for (int i = 0; i < size; i++) {
      number = in.nextInt();

      if (number == 42) counter++;
    }

    System.out.println(counter);

    in.close();
  }
}

-- DAA002
import java.util.Scanner;

public class DAA002 {
  public static void main(String[] args) {
    Scanner in = new Scanner(System.in);

    int tests = in.nextInt();

    for (int i = 0; i < tests; i++) {
      int n = in.nextInt();
      int k = in.nextInt();

      int number = n+1;
      while (digitSum(number) != k) {
        number++;
      }

      System.out.println(number);
    }

    in.close();
  }

  public static int digitSum(int number) {
    int n = number;
    int sum = 0;

    while (n != 0) {
      sum += n % 10;
      n /= 10;
    }

    return sum;
  }
}

-- DAA003
import java.util.Scanner;

public class DAA003 {
  // Helper functions
  public static int charValue(Character ch) {
    if (Character.isDigit(ch)) {
      return Character.getNumericValue(ch);
    } else {
      int d = ch - 'A';

      if (d >= 25) d -= 1;
      if (d >= 23) d -= 1;
      if (d >= 11) d -= 1;

      return d;
    }
  }

  // Plate functions
  public static int getPlateGeneration(String plate) {
    // 1st generation
    if (Character.isAlphabetic(plate.charAt(0)) && Character.isDigit(plate.charAt(3)) && Character.isDigit(plate.charAt(6))) {
      return 1;
    }

    // 2nd generation
    if (Character.isDigit(plate.charAt(0)) && Character.isDigit(plate.charAt(3)) && Character.isAlphabetic(plate.charAt(6))) {
      return 2;
    }

    // 3rd generation
    if (Character.isDigit(plate.charAt(0)) && Character.isAlphabetic(plate.charAt(3)) && Character.isDigit(plate.charAt(6))) {
      return 3;
    }

    // 4th generation
    return 4;
  }

  public static long getGenerationMaxPlates(int generation) {
    if (generation == 1 || generation == 2 || generation == 3) {
      return 5290000;
    } else if (generation == 4) {
      return 27984100;
    }

    return 0;
  }

  public static long getPlateNumber(String plate) {
    int generation = getPlateGeneration(plate);
    long number = 0;

    String chars = plate.replace("-", "");

    if (generation == 1) {
      number = (charValue(chars.charAt(0)) * 23 * 10000) +
        (charValue(chars.charAt(1)) * 10000) +
        (charValue(chars.charAt(2)) * 1000) +
        (charValue(chars.charAt(3)) * 100) + 
        (charValue(chars.charAt(4)) * 10) +
        (charValue(chars.charAt(5)) * 1);
    } else if (generation == 2) {
      number = (charValue(chars.charAt(4)) * 23 * 10000) +
        (charValue(chars.charAt(5)) * 10000) +
        (charValue(chars.charAt(0)) * 1000) +
        (charValue(chars.charAt(1)) * 100) + 
        (charValue(chars.charAt(2)) * 10) +
        (charValue(chars.charAt(3)) * 1);
    } else if (generation == 3) {
      number = (charValue(chars.charAt(2)) * 23 * 10000) +
        (charValue(chars.charAt(3)) * 10000) +
        (charValue(chars.charAt(0)) * 1000) +
        (charValue(chars.charAt(1)) * 100) + 
        (charValue(chars.charAt(4)) * 10) +
        (charValue(chars.charAt(5)) * 1);
    } else if (generation == 4) {
      number = (charValue(chars.charAt(0)) * 23 * 23 * 23 * 100) +
        (charValue(chars.charAt(1)) * 23 * 23 * 100) +
        (charValue(chars.charAt(4)) * 23 * 100) +
        (charValue(chars.charAt(5)) * 100) + 
        (charValue(chars.charAt(2)) * 10) +
        (charValue(chars.charAt(3)) * 1);
    }

    // Add plate count offset
    for (int i = 1; i < generation; i++) {
      number += getGenerationMaxPlates(i);
    }

    return number;
  }

  public static long plateDifference(String plate1, String plate2) {
    long p1Num = getPlateNumber(plate1);
    long p2Num = getPlateNumber(plate2);

    return Math.abs(p1Num - p2Num);
  }

  public static void main(String[] args) {
    Scanner in = new Scanner(System.in);

    int tests = in.nextInt();
    for (int i = 0; i < tests; i++) {
      String plate1 = in.next();
      String plate2 = in.next();

      System.out.println(plateDifference(plate1, plate2));
    }

    in.close();
  }
}

-- DAA005
public class DAA005 {
  static int n;
  static int[] energies;
  static int[] sum;

  static int f;

  public static void main(String[] args) {
    FastScanner in = new FastScanner(System.in);

    n = in.nextInt();
    energies = new int[n];
    sum = new int[n+1];

    for (int i = 0; i < n; i++) {
      energies[i] = in.nextInt();
      sum[i+1] = energies[i] + sum[i];
    }

    f = in.nextInt();
    for (int i = 0; i < f; i++) {
      int start = in.nextInt();
      int end = in.nextInt();

      FastPrint.out.println(sum[end] - sum[start-1]);
    }

    FastPrint.out.close();
  }
}

-- DAA009
import java.io.*;
import java.util.*;

class Char implements Comparable<Char> {
  public int dictionaryIndex;
  public int firstOccurrence;
  public int counter;

  Char () {
    dictionaryIndex = -1;
    firstOccurrence = -1;
    counter = 0;
  }

  @Override
  public int compareTo(Char c) {
    if (counter < c.counter) return +1;
    if (counter > c.counter) return -1;

    if (firstOccurrence < c.firstOccurrence) return -1;
    if (firstOccurrence > c.firstOccurrence) return +1;

    return 0;
  }
}

public class DAA009 {
  public static void main(String[] args) {
    FastScanner in = new FastScanner(System.in);

    Char[] frequencies = new Char[26];
    for (int i = 0; i < 26; i++) {
      frequencies[i] = new Char();
    }

    // Read DNA sequence
    String sequence = in.nextLine();
    int dictionaryIndex = -1;

    for (int i = 0; i < sequence.length(); i++) {
      dictionaryIndex = sequence.charAt(i) - 'A';
      
      // Set dictionary index (if not set previously)
      if (frequencies[dictionaryIndex].dictionaryIndex == -1) {
        frequencies[dictionaryIndex].dictionaryIndex = dictionaryIndex;
      }

      // Set first occurrence index (if not set previously)
      if (frequencies[dictionaryIndex].firstOccurrence == -1) {
        frequencies[dictionaryIndex].firstOccurrence = i;
      }

      // Increment character count
      frequencies[dictionaryIndex].counter++;
    }

    // Order by frequency
    Arrays.sort(frequencies);

    for (int i = 0; i < 26; i++) {
      if (frequencies[i].counter > 0) {
        FastPrint.out.printf("%c %d\n", 'A' + frequencies[i].dictionaryIndex, frequencies[i].counter);
      }
    }

    // Close print buffer
    FastPrint.out.close();
  }
}

-- DAA010
import java.util.*;

public class DAA010 {
  public static int combinations(int n) {
    return (n * (n-1))/2;
  }

  public static int[] nearestBSearch(int[] arr, int key) {
    int middle = arr.length / 2;
    int low = 0;
    int high = arr.length-1;

    while (low < high) {
      middle = low + ((high - low) / 2);
      
      if (arr[middle] >= key) {
        high = middle;
      } else {
        low = middle + 1;
      }
    }

    if (low - 1 >= 0) {
      if (Math.abs((arr[low-1] - key)) < Math.abs((arr[low] - key))) return new int[] { arr[low - 1] };
      if (Math.abs((arr[low-1] - key)) == Math.abs((arr[low] - key))) return new int[] { arr[low - 1], arr[low] };
    }

    return new int[] { arr[low] };
  }

  public static void main(String[] args) {
    FastScanner in = new FastScanner(System.in);

    int n;
    int[] set;
    int[] sums;
    int q = 0;
    int qSum = 0;

    n = in.nextInt();
    set = new int[n];
    sums = new int[combinations(n)];

    // Read set of numbers
    for (int i = 0; i < n; i++) { 
      set[i] = in.nextInt();
    }

    // Calculate all possible sums
    int sumIndex = 0;
    for (int i = 0; i < n; i++) {
      for (int j =  i + 1; j < n; j++) {
        sums[sumIndex] = set[i] + set[j];

        sumIndex++;
      }
    }

    // Sort sums
    Arrays.sort(sums);

    // Read number of questions
    q = in.nextInt();

    // Read every question and answer it
    for (int i = 0; i < q; i++) {
      qSum = in.nextInt();

      int[] answers = nearestBSearch(sums, qSum);
      
      for (int a = 0; a < answers.length; a++) {
        if (answers[a] >= 0) {
          FastPrint.out.printf("%d", answers[a]);

          if (a < answers.length-1 && answers[a+1] >= 0) {
            FastPrint.out.printf(" ");
          }
        }
      }

      FastPrint.out.printf("\n");
    }

    FastPrint.out.close();
  }
}

-- DAA018
import java.util.*;

public class DAA018 {
  public static void numCoins(int[] coins, int sum) {
    int[] minCoins = new int[sum+1];
    int[] coinsUsed = new int[sum+1];

    // Find minimum numbers of coins needed to complete required sum
    minCoins[0] = 0;
    for (int i = 1; i <= sum; i++) {
      minCoins[i] = 1000000000;

      for (int j = 0; j < coins.length; j++) {
        if (coins[j] <= i && 1 + minCoins[i - coins[j]] < minCoins[i]) {
          coinsUsed[i] = coins[j];
          minCoins[i] = 1 + minCoins[i - coins[j]];
        }
      }
    }

    // Add every single coin
    int r = sum;
    int index = 0;
    int[] orderedCoins = new int[minCoins[sum]];
    while (r != 0) {
      orderedCoins[index++] = coinsUsed[r];

      r -= coinsUsed[r];
    }
    
    // Sort coins
    Arrays.sort(orderedCoins);

    // Print coins by ascending order
    FastPrint.out.printf("%d: [%d] ", sum, minCoins[sum]);
    for (int i = 0; i < orderedCoins.length; i++) {
      FastPrint.out.printf("%d", orderedCoins[i]);

      if (i < orderedCoins.length-1) {
        FastPrint.out.printf(" ");
      }
    }

    FastPrint.out.printf("\n");
  }

  public static void main(String[] args) {
    FastScanner in = new FastScanner(System.in);
    
    int numCoins = 0;
    int[] coins;
    int questions = 0;
    int questionSum = 0;

    numCoins = in.nextInt();
    coins = new int[numCoins];

    // Read each coin value
    for (int i = 0; i < numCoins; i++) {
      coins[i] = in.nextInt();
    }

    // Read questions and answer them
    questions = in.nextInt();
    for (int i = 0; i < questions; i++) {
      questionSum = in.nextInt();

      numCoins(coins, questionSum);
    }

    FastPrint.out.close();
  }
}

# Helpers

----------------------------------------------------------------------------------
TEST 2 THEORY
----------------------------------------------------------------------------------

----------------------------------------------------------------------------------
BS
----------------------------------------------------------------------------------
-- Pesquisa binária num array ordenado

bsearch(v, low, high, key)
  Enquanto (low ≤ high ) fazer
    middle ← low + (high − low)/2
    Se (key = v[middle]) retorna(middle)
    Senão se (key < v[middle]) high ← middle − 1
    Senão low ← middle + 1
  retorna(-1)


----------------------------------------------------------------------------------
CONDITIONAL BS
----------------------------------------------------------------------------------
-- Pesquisa binária para condição

bsearch(low, high, condicao)
  Enquanto (low < high ) fazer
    middle ← low + (high − low)/2
    Se (condicao(middle) = sim) high ← middle
    Senão low ← middle + 1
  Se (condicao(low) = nao) retorna(-1)
  retorna(low)

----------------------------------------------------------------------------------
DYNAMIC PROGRAMMING
----------------------------------------------------------------------------------
-- PD
Programação Dinâmica
Uma técnica algorítmica, normalmente usada em problemas de
optimização, que é baseada em guardar os resultados de subproblemas
em vez de os recalcular.
Técnica algorítmica: método geral para resolver problemas que têm
algumas características em comum
Problema de Optimização: encontrar a ”melhor” solução entre
todas as solucções possíveis, segundo um determinado critério (função
objectivo). Geralmente descobrir um máximo ou mínimo.

-- PD Steps
Guia para resolver com PD
1 Caracterizar a solução ótima do problema
2 Definir recursivamente a solução ótima, em função de soluções
ótimas de subproblemas
3 Calcular as soluções de todos os subproblemas: ”de trás para a
frente” ou com ”memoization”
4 Reconstruir a solução ótima, baseada nos cálculos efectuados
(opcional - apenas se for necessário)

----------------------------------------------------------------------------------
CODE
----------------------------------------------------------------------------------
-- DAA021
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Map;

public class DAA021 {
  public static void main(String[] args) {
    FastScanner in = new FastScanner(System.in);

    int a;
    int r;

    String action;
    int energy;
    int counter;
    TreeMap<Integer, Integer> energies = new TreeMap<Integer, Integer>();

    // Read additions and removals
    a = in.nextInt();
    r = in.nextInt();

    for (int i = 0; i < a+r; i++) {
      action = in.next();

      // Add a new bakugan
      if (action.compareTo("BAK") == 0) {
        energy = in.nextInt();

        // Add one more bakugan with an existing energy
        if (energies.containsKey(energy)) {
          energies.put(energy, energies.get(energy) + 1);
        } else {
          energies.put(energy, 1);
        }
      }

      // Remove a minimum value bakugan
      if (action.compareTo("MIN") == 0) {
        FastPrint.out.println(energies.firstKey());

        counter = energies.get(energies.firstKey());
        if (counter-1 == 0) {
          energies.remove(energies.firstKey());
        } else {
          energies.put(energies.firstKey(), counter-1);
        }
      }

      // Remove a maximum value bakugan
      if (action.compareTo("MAX") == 0) {
        FastPrint.out.println(energies.lastKey());

        counter = energies.get(energies.lastKey());
        if (counter-1 == 0) {
          energies.remove(energies.lastKey());
        } else {
          energies.put(energies.lastKey(), counter-1);
        }
      }
    }

    FastPrint.out.close();
  }
}

-- DAA022
// Tree node
class Node {
  boolean isBlack;
  boolean isNull;
  int value;
  Node left, right;

  Node(int v) {
    isNull  = (v==0);
    isBlack = (v>=0);
    value   = Math.abs(v);
  }
}

class DAA022 {
  static Node readPreOrder(FastScanner in) {
    int v = in.nextInt();
    Node aux = new Node(v);
    if (v!=0) {
      aux.left  = readPreOrder(in);
      aux.right = readPreOrder(in);
    }
    return aux;
  }

  static int minimum(Node t) {
    if (t.isNull) return Integer.MAX_VALUE;
    int minLeft  = minimum(t.left);
    int minRight = minimum(t.right);
    return Math.min(t.value, Math.min(minLeft, minRight));
  }

  static int maximum(Node t) {
    if (t.isNull) return Integer.MIN_VALUE;
    int minLeft  = maximum(t.left);
    int minRight = maximum(t.right);
    return Math.max(t.value, Math.max(minLeft, minRight));
  }

  static int size(Node t) {
    if (t.isNull) return 0;
    return 1 + size(t.left) + size(t.right);
  }

  // ---------------------------------------------------

  static boolean isBST(Node t, int min, int max) {
    if (t.isNull) return true;

    if (t.value < min)
      return false;
    
    if (t.value > max)
      return false;

    return isBST(t.left, min, t.value) && isBST(t.right, t.value, max);
  }

  static boolean isRootBlack(Node t) {
    if (t.isBlack) return true;
    else return false;
  }

  static boolean hasRedProperty(Node t) {
    if (t.isNull) return true;

    if (!t.isBlack) {
      if (!(t.left.isBlack && t.right.isBlack)) return false;
      else return hasRedProperty(t.left) && hasRedProperty(t.right);
    } else {
      return hasRedProperty(t.left) && hasRedProperty(t.right);
    }
  }

  static boolean hasLeafProperty(Node t) {
    if (t.isNull) {
      if (t.isBlack) return true;
      else return false;
    } else return hasLeafProperty(t.left) && hasLeafProperty(t.right);
  }

  static int blackNodesUntilLeaf(Node t) {
    if (t.isNull) return 0;

    // Count black nodes from left and right nodes to leafs
    int left = blackNodesUntilLeaf(t.left);
    int right = blackNodesUntilLeaf(t.right);

    // If the current node is black, it is counted too
    if (t.isBlack) {
      left++;
      right++;
    }

    if (left != right) return -1;
    else return left;
  }

  static boolean hasBlackProperty(Node t) {
    if (t.isNull) return true;

    // Count black nodes from left and right nodes to leafs
    int left = blackNodesUntilLeaf(t.left);
    int right = blackNodesUntilLeaf(t.right);

    // If the current node is black, it is counted too
    if (t.isBlack) {
      left++;
      right++;
    }

    if (left != right) return false;
    else return true;
  }

  static boolean isRedBlack(Node t) {
    return isBST(t, -1000000, 1000000) &&
      isRootBlack(t) &&
      hasRedProperty(t) &&
      hasLeafProperty(t) &&
      hasBlackProperty(t);
  }
  
  public static void main(String args[]) {
    FastScanner in = new FastScanner(System.in);

    Node root;
    int n = in.nextInt();
    for (int i = 0; i < n; i++) {
      root = readPreOrder(in);
    
      if (isRedBlack(root)) {
        FastPrint.out.println("SIM");
      } else {
        FastPrint.out.println("NAO");
      }
    }

    FastPrint.out.close();
  }
}


----------------------------------------------------------------------------------
TEST 2 THEORY
----------------------------------------------------------------------------------

----------------------------------------------------------------------------------
GRAPHS
----------------------------------------------------------------------------------
-- Graphs

Algumas Vantagens/Desvantagens:
Matriz de Adjacências:
- Muito simples de implementar
- Rápida para ver se existe ligação entre dois nós - O(1)
- Lenta para percorrer n´os adjacentes - O(|V|)
- Elevado desperd´ıcio de mem´oria (em grafos esparsos) - O(|V|^2)
- Grafo pesado implica apenas armazenar peso na matriz
- Adicionar/remover ligações é só mudar célula da matriz - O(1)

Lista de Adjacências:
- Lenta para ver se existe ligação entre nós u e v - O(grau(u))
- Rápida para percorrer nós adjacentes - O(grau(u))
- Memória bem aproveitada - O(|V| + |E|)
- Grafo pesado implica adicionar um campo à lista
- Remover ligação (u, v) implica percorrer a lista - O(grau(u))

Nota: podemos usar por exemplo BSTs (set/map) para melhorar
eficiência da pesquisa/remoção para O(log grau(u))

Ordenação topológica:

ordem ← lista vazia
marcar todos os nós como não visitados
Para todos os nós v do grafo fazer
  Se v ainda n˜ao foi visitado ent˜ao
    dfs(v)
escrever(ordem)

dfs(nó v):
  marcar v como visitado
  Para todos os nós w adjacentes a v fazer
    Se w ainda nao foi visitado então
      dfs(w)
  adicionar v ao início da lista ordem

----------------------------------------------------------------------------------
DFS
----------------------------------------------------------------------------------
-- Tabela de DFS:
Vamos acrescentar mais 2 propriedades aos nós numa visita dfs:
- num(i): ordem em que i é visitado
- low(i): menor num(i) atingível pela subárvore que começa em i.
    É o mínimo entre:
      - num(i)
      - menor num(v) entre todos os back edges (i, v)
      - menor low(v) entre todos os tree edges (i, v)

----------------------------------------------------------------------------------
DFS IMPLEMENTATION
----------------------------------------------------------------------------------
import java.util.*;
import java.io.*;

public class DFS {
    static int n;              // Numero de nos do grafo
    static boolean adj[][];    // Matriz de adjacencias
    static boolean visited[];  // Que nos ja foram visitados?

    static void dfs(int v) {
	System.out.print(v + " ");
	visited[v] = true;
	for (int i=1; i<=n; i++)
	    if (adj[v][i] && !visited[i])
		dfs(i);
    }
    
    public static void main(String args[]) {
	Scanner stdin = new Scanner(System.in);
	
	n = stdin.nextInt();
	adj     = new boolean[n+1][n+1];
	visited = new boolean[n+1];	
	int edges = stdin.nextInt();	
	for (int i=0; i<edges; i++) {
	    int a = stdin.nextInt();
	    int b = stdin.nextInt();
	    adj[a][b] = adj[b][a] = true;
	}

	dfs(1); // Pesquisa em profundidade a partir do no 1
	System.out.println();       
    }
}

----------------------------------------------------------------------------------
BFS
----------------------------------------------------------------------------------
-- Encontrar pontos de articulação (Explicação e Pseudo-código)
Uma ideia:

1. Aplicar DFS no grafo e obter a árvore de DFS
2. Se um nó v tem um filho w que não tem nenhum caminho para
  um antecessor de v, então v é um ponto de articulação! (pois
  retirá-lo desliga w do resto do grafo)
    Isto corresponde a verificar que low[w] ≥ num[v]
3. A unica excepção é a raiz da pesquisa. Se tiver mais que um filho...
então é também ponto de articulação!

----------------------------------------------------------------------------------
BFS IMPLEMENTATION
----------------------------------------------------------------------------------

dfs art(nó v):
  num[v] ← low[v] ← index ; index ← index + 1 ; S.push(v)
  Para todos os nós w adjacentes a v fazer
    Se num[w] ainda não está definido então /* Tree Edge */
      dfs art(w) ; low[v] ← min(low[v], low[w])
      Se low[w] ≥ num[v] ent˜ao
        escrever(v + ”é um ponto de articulação”)
    Senão se w está em S então /* Back Edge */
      low[v] ← min(low[v], num[w])
  S.pop()

----------------------------------------------------------------------------------
CODE
----------------------------------------------------------------------------------
-- Ordenação Topológica
#include <stdio.h>
#include <stdbool.h>

#define MAX 25

int n;                        // Numero de nos
bool adj[MAX][MAX];           // Matriz de adjacencias
bool visited[MAX];            // Visitados
int order[MAX], norder;

void dfs(int v) {
  visited[v] = true;
  for(int i = 1; i <= n; i++) {
    if (adj[v][i] && !visited[i])
      dfs(i);
  }
  order[norder++] = v;
}

int main() {
  int e, a, b;

  scanf("%d", &n);
  scanf("%d", &e);

  for(int i = 0; i < e; i++) {
    scanf("%d %d", &a, &b);
    adj[a][b] = true;
  }

  norder = 0;
  for(int i = 1; i < n; i++){
    if(!visited[i]){
      dfs(i);
    }
  }
  for(int i = n-1; i >= 0; i--) {
    printf("%d ", order[i]);
  }
  printf("\n");
  return 0;
}


-- DAA025
public class DAA025 {
  static int n;              // Nodes number
  static boolean adj[][];    // Adjacent matrix
  static boolean visited[];  // Visited matrix

  static int circuitsCounter = 0;

  static void dfs(int v) {
    visited[v] = true;
    for (int i = 1; i <= n; i++) {
      if (adj[v][i] && !visited[i]) {
        dfs(i);
      }
    }
  }
    
  public static void main(String args[]) {
    FastScanner in = new FastScanner(System.in);
    
    // Read number of nodes
    n = in.nextInt();
    
    // Create adjacent and visited arrays
	  adj = new boolean[n+1][n+1];
    visited = new boolean[n+1];
    
    // Read number of edges and read edges
	  int edges = in.nextInt();	
	  for (int i = 0; i < edges; i++) {
	    int a = in.nextInt();
      int b = in.nextInt();

	    adj[a][b] = adj[b][a] = true;
    }
    
    // Start a DFS on all unvisited nodes
    for (int i = 1; i < adj.length; i++) {
      if (!visited[i]) {
        circuitsCounter++;
        dfs(i);
      }
    }

    FastPrint.out.println(circuitsCounter);
    FastPrint.out.close();
  }
}

-- DAA026
import java.util.*;

public class DAA026 {
  static int cases;
  static int rows;
  static int columns;
  static boolean map[][];

  static int currentBlobSize;
  static int maximumBlobSize;
  static boolean visited[][];

  static void dfs(int x, int y) {
    if (!(x >= 0 && x < rows && y >= 0 && y < columns)) return;

    if (!visited[x][y]) {
      visited[x][y] = true;

      if (map[x][y]) {
        currentBlobSize++;

        // Left and right
        dfs(x+1, y);
        dfs(x-1, y);

        // Up and down
        dfs(x, y+1);
        dfs(x, y-1);

        // Diagonal
        dfs(x-1, y-1);
        dfs(x+1, y-1);
        dfs(x-1, y+1);
        dfs(x+1, y+1);
      }
    }
  }

  public static void main(String args[]) {
    FastScanner in = new FastScanner(System.in);

    String line;

    // Read number of cases
    cases = in.nextInt();
    for (int i = 0; i < cases; i++) {
      rows = in.nextInt();
      columns = in.nextInt();
      maximumBlobSize = 0;

      // Create graph map and visited map
      map = new boolean[rows][columns];
      visited = new boolean[rows][columns];
      for (int r = 0; r < rows; r++) {
        line = in.nextLine();

        for (int c = 0; c < columns; c++) {
          if (line.charAt(c) == '.') map[r][c] = false;
          else map[r][c] = true;
        }
      }
      
      // Start DFS on all unvisited occupied cells
      int blobCounter = 1;
      for (int r = 0; r < rows; r++) {
        for (int c = 0; c < columns; c++) {
          if (!visited[r][c] && map[r][c]) {
            currentBlobSize = 0;
            dfs(r, c);
            
            // Update current map's maximum blob size
            maximumBlobSize = Math.max(maximumBlobSize, currentBlobSize);
          }
        }
      }
      
      // Print maximum blob size
      FastPrint.out.println(maximumBlobSize);
    }

    FastPrint.out.close();
  }
}

-- DAA027
import java.util.*;

public class DAA027 {
  static int cases;
  static int nodes;
  static int edges;

  static boolean adj[][];
  static boolean visited[];
  static int colors[];

  static boolean dfs(int v) {
    for (int i = 1; i <= nodes; i++) {
      if (adj[v][i]) {
        if (!visited[i]) {
          visited[i] = true;
          colors[i] = colors[v] == 1 ? 2 : 1;

          if (!dfs(i)) return false;
        } else if (colors[i] == colors[v]) return false;
      }
    }

    return true;
  }

  public static void main(String args[]) {
    FastScanner in = new FastScanner(System.in);

    // Read number of cases
    cases = in.nextInt();
    for (int i = 0; i < cases; i++) {
      nodes = in.nextInt();
      edges = in.nextInt();
      
      adj = new boolean[nodes+1][nodes+1];
      visited = new boolean[nodes+1];
      colors = new int[nodes+1];

      // Read edges
      for (int e = 0; e < edges; e++) {
        int a = in.nextInt();
        int b = in.nextInt();

        adj[a][b] = adj[b][a] = true;
      }

      // Set first node color and visited status
      visited[1] = true;
      colors[1] = 1;

      // Check if graph can be bipartite
      boolean bipartite = dfs(1);
      if (bipartite) FastPrint.out.println("sim");
      else FastPrint.out.println("nao");
    }

    FastPrint.out.close();
  }
}

-- DAA030
import java.io.*;
import java.util.*;

class Node {
  public LinkedList<Integer> adj; // Adjacent nodes list
  public boolean visited;         // Visited boolean status
  public int distance;            // Distance to origin node

  Node() {
	  adj = new LinkedList<Integer>();
  }
}

class Graph {
  int n;           // Nodes number
  Node nodes[];    // Nodes array

  // Constructor
  Graph(int n) {
	  this.n = n;

    // Read nodes
    nodes  = new Node[n+1];
	  for (int i = 1; i <= n; i++)
	    nodes[i] = new Node();
  }

  // Link two nodes
  public void addLink(int a, int b) {
	  nodes[a].adj.add(b);
	  nodes[b].adj.add(a);
  }

  // Algoritmo de pesquisa em largura
  public int bfs(int v) {
    // Create list of unvisited nodes
	  LinkedList<Integer> q = new LinkedList<Integer>();
	  for (int i = 1; i<=n; i++) nodes[i].visited = false;

    // Maximum distance
    int maxDistance = 0;

    // Add current node but tag it as visited
	  q.add(v);
	  nodes[v].visited = true;
	  nodes[v].distance = 0;

    while (q.size() > 0) {
	    int u = q.removeFirst();
      maxDistance = Math.max(maxDistance, nodes[u].distance);
	   
      // System.out.println(u + " [dist=" + nodes[u].distance + "]");
	    for (int w : nodes[u].adj) {
        if (!nodes[w].visited) {
		      q.add(w);
		      nodes[w].visited = true;
		      nodes[w].distance = nodes[u].distance + 1; 
		    }
      }
    }

    return maxDistance;
  }
}

public class DAA030 {
  public static void main(String args[]) {
	  FastScanner in = new FastScanner(System.in);

    // Read number of nodes and create new graph
	  int nodes = in.nextInt();
    Graph g = new Graph(nodes);

    // Read number of edges and read all connections
    int e = in.nextInt();
    for (int i = 0; i < e; i++)
	    g.addLink(in.nextInt(), in.nextInt());

	  int diameter = 0;
    int radius = nodes+1;
    int[] centralNodes;
    int[] periphericalNodes;

    // Start BFS at all nodes until the whole graph has been searched
    for (int i = 1; i <= nodes; i++) {
      diameter = Math.max(diameter, g.bfs(i));
      radius = Math.min(radius, g.bfs(i));
    }

    // Print diameter and radius
    FastPrint.out.println(diameter);
    FastPrint.out.println(radius);

    // Print the central and peripherical nodes
    boolean firstValue = true;
    for (int i = 1; i <= nodes; i++) {
      if (g.bfs(i) == radius) {
        if (!firstValue) FastPrint.out.printf(" ");
        else firstValue = false;

        FastPrint.out.printf("%d", i);
      }
    }
    FastPrint.out.println();

    firstValue = true;
    for (int i = 1; i <= nodes; i++) {
      if (g.bfs(i) == diameter) {
        if (!firstValue) FastPrint.out.printf(" ");
        else firstValue = false;

        FastPrint.out.printf("%d", i);
      }
    }
    FastPrint.out.println();

    // Close print buffer
    FastPrint.out.close();
  }
}

-- DAA031 (DNF)
import java.io.*;
import java.util.*;

class Point {
  public int x;                      // X coordinate
  public int y;                      // Y coordinate
  public LinkedList<Point> adj;      // Adjacent points list
  public int type;                   // Type of point (0 - Nothing 1 - Airport 2 - Cloud)
  public boolean visited;            // Visited boolean status
  public int distance;               // Distance to origin node

  Point(int x, int y) {
	  adj = new LinkedList<Point>();
  }
}

class GraphMap {
  int r;           // Map rows
  int c;           // Map columns
  Point points[][];  // Map

  // Constructor
  GraphMap(int r, int c) {
	  this.r = r;
    this.c = c;

    points = new Point[r+1][c+1];
	  for (int i = 1; i <= r; i++) {
      for (int j = 0; j < c; j++) {
        points[i][j+1] = new Point(i, j+1);
      }
    }
  }

  // Link two points
  public void addLink(int x1, int y1, int x2, int y2) {
    if ((x1 >= 1 && x1 <= r && y1 >= 1 && y1 <= c) &&
      (x2 >= 1 && x2 <= r && y2 >= 1 && y2 <= c)) {
      points[x1][y1].adj.add(points[x2][y2]);
      points[x2][y2].adj.add(points[x1][y1]);
    }
  }

  // BFS algorithm
  public int bfs(int x, int y) {
    // Create list of unvisited points
	  LinkedList<Point> q = new LinkedList<Point>();
	  for (int i = 1; i <= r; i++) {
      for (int j = 1; j <= c; j++)
        points[i][j].visited = false;
    }

    // Maximum distance
    int maxDistance = 0;

    // Add current node but tag it as visited
	  q.add(points[x][y]);
	  points[x][y].visited = true;
	  points[x][y].distance = 0;

    while (q.size() > 0) {
	    Point currPoint = q.removeFirst();
      // if (currPoint.type == 1) {
      //   FastPrint.out.printf("Max %d\n", maxDistance);
      //   maxDistance = Math.max(maxDistance, currPoint.distance);
      // }
      maxDistance = Math.max(maxDistance, currPoint.distance);
	   
      // System.out.println(u + " [dist=" + nodes[u].distance + "]");
	    for (Point w : currPoint.adj) {
        if (!w.visited) {
		      q.add(w);
		      w.visited = true;
		      w.distance = w.distance + 1;
		    }
      }
    }

    return maxDistance;
  }
}

public class DAA031 {
  public static void main(String args[]) {
	  FastScanner in = new FastScanner(System.in);

    // Read rows and columns number
    int rows;
    int columns;
    rows = in.nextInt();
    columns = in.nextInt();

    // Create graph
    GraphMap g = new GraphMap(rows, columns);

    // Read map
    String line;
	  for (int i = 1; i <= rows; i++) {
      line = in.nextLine();

      for (int j = 0; j < columns; j++) {
        if (line.charAt(j) == '.')
          g.points[i][j+1].type = 0;
        
        if (line.charAt(j) == 'A')
          g.points[i][j+1].type = 1;

        if (line.charAt(j) == '#')
          g.points[i][j+1].type = 2;

        // Add adjacent points
        // Left and right
        g.addLink(i, j, i, j-1);
        g.addLink(i, j, i, j+1);

        // Top and bottom
        g.addLink(i, j, i-1, j);
        g.addLink(i, j, i+1, j);
      }
    }

    int diameter = 0;
    int radius = 100000;

    // Start BFS at all nodes until the whole graph has been searched
    for (int r = 1; r <= rows; r++) {
      for (int c = 1; c <= columns; c++) {
        if (g.points[r][c].type == 1) {
          diameter = Math.max(diameter, g.bfs(r, c));
          break;
        }
      }
    }

    for (int r = 1; r <= rows; r++) {
      for (int c = 1; c <= columns; c++) {
        g.points[r][c].distance = 0;
      }
    }

    for (int r = 1; r <= rows; r++) {
      for (int c = 1; c <= columns; c++) {
        if (g.points[r][c].type == 1) {
          radius = Math.min(radius, g.bfs(r, c));
          break;
        }
      }
    }


    FastPrint.out.printf("%d %d\n", radius+1, diameter+1);

    // Close print buffer
    FastPrint.out.close();
  }
}

-- DAA033 (DNF)
import java.util.*;

class Edge {
  int to;     // No destino
  int weight; // Peso da aresta
    
  Edge(int t, int w) {
  	to = t;
	  weight = w;
  }
}

class Node {
  public LinkedList<Edge> adj; // Lista de adjacencias
  public boolean visited;      // No ja foi visitado?
  public int distance;         // Distancia ao no origem da pesquisa
  
  Node() {
	  adj = new LinkedList<>();
  } 
};

// Classe que representa um no para ficar na fila de prioridade
class NodeQ implements Comparable<NodeQ> {
  public int cost;
  public int node;

  NodeQ(int c, int n) {
	  cost = c;
	  node = n;
  }

  @Override
  public int compareTo(NodeQ nq) { 
    if (cost < nq.cost) return -1; 
    if (cost > nq.cost) return +1;
    if (node < nq.node) return -1; 
	  if (node > nq.node) return +1;
    return 0; 
  } 
}

class Graph {
  int n;
  Node[] nodes;
    
  Graph(int n) {
	  this.n = n;
	  nodes = new Node[n+1];  // +1 se os nos comecam em 1 ao inves de 0
	  
    for (int i=1; i<=n; i++)
	    nodes[i] = new Node();
  }
    
  void addLink(int a, int b, int c) {
	  nodes[a].adj.add(new Edge(b, c));
  }

  // Algoritmo de Dijkstra
  void dijkstra(int s) {
    //Inicializar nos como nao visitados e com distancia infinita
    for (int i=1; i<=n; i++) {
      nodes[i].distance = Integer.MAX_VALUE;
      nodes[i].visited  = false;
    }
	
    // Inicializar "fila" com no origem
    nodes[s].distance = 0;
    TreeSet<NodeQ> q = new TreeSet<>();
    q.add(new NodeQ(0, s)); // Criar um par (dist=0, no=s)

    // Ciclo principal do Dijkstra
    while (!q.isEmpty()) {
        
        // Retirar no com menor distancia (o "primeiro" do set, que e uma BST)
        NodeQ nq = q.pollFirst();
        int  u = nq.node;
        nodes[u].visited = true;
        System.out.println(u + " [dist=" + nodes[u].distance + "]");
        
        // Relaxar arestas do no retirado
        for (Edge e : nodes[u].adj) {
      int v = e.to;
      int cost = e.weight;
      if (!nodes[v].visited && nodes[u].distance + cost < nodes[v].distance) {
          q.remove(new NodeQ(nodes[v].distance, v)); // Apagar do set
          nodes[v].distance = nodes[u].distance + cost;
          q.add(new NodeQ(nodes[v].distance, v));    // Inserir com nova (e menor) distancia
      }
        }
    }
  }
}

public class dijkstra {
  public static void main(String args[]) {
    Scanner in = new Scanner(System.in);
    
    int n = in.nextInt();
    Graph g = new Graph(n);

    int e = in.nextInt();
    for (int i = 0; i < e; i++) 
      g.addLink(in.nextInt(), in.nextInt(), in.nextInt());

    // Execucao exemplo a partir do no 1
    g.dijkstra(1);
  }
}

-- DAA035
import java.util.*;

public class DAA035{
	static void floydMarshall(int[][] matrix, int n) {
    boolean[][] connected = new boolean[n][n];
    for (int i = 0; i < n; i++)
      connected[i][i] = true;

    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++)
        if(matrix[i][j] == 1) connected[i][j] = true;
    }
    
    for (int k = 0; k < n; k++) {
      for (int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++)
          if (connected[i][k] && connected[k][j]) connected[i][j] = true;
      }
    }
    
    System.out.print(" ");
    for (int i = 0; i < n; i++) {
      int tmp = 'A' + i;
      char c = (char) tmp;

      System.out.print(" " + c);
    }
    System.out.println();

		for (int i = 0; i < n; i++) {
			int tmp = 'A' + i;
      char a = (char) tmp;
      System.out.print(a);

      for (int j = 0; j < n; j++) {
        if (connected[i][j]) System.out.print(" 1");
        else System.out.print(" 0");
		  }

      System.out.println();
    }
  }

	public static void main(String[] args) {
		FastScanner in = new FastScanner(System.in);
		int n = in.nextInt();
		int[][] matrix = new int[n][n];

		for (int i = 0; i < n; i++) {
			char c = in.next().charAt(0);
			int pos1 = c - 'A';
			int numDist = in.nextInt();
			
      for (int j = 0; j < numDist; j++) {
				int pos2 = in.next().charAt(0) - 'A';
				matrix[pos1][pos2] = 1;
			}
		}

		floydMarshall(matrix, n);
	}
}